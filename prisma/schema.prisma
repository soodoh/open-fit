generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role     Role
  password String

  routine Routine[]
  session WorkoutSession[]

  defaultRepetitionUnit   RepetitionUnit @relation(fields: [defaultRepetitionUnitId], references: [id])
  defaultRepetitionUnitId Int            @default(1)
  defaultWeightUnit       WeightUnit     @relation(fields: [defaultWeightUnitId], references: [id])
  defaultWeightUnitId     Int            @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Routine {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  routineDays RoutineDay[]
}

model RoutineDay {
  id             Int               @id @default(autoincrement())
  routine        Routine           @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineId      Int
  weekdays       Int[]
  description    String
  setGroups      WorkoutSetGroup[]
  WorkoutSession WorkoutSession[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum SetGroupType {
  NORMAL
  SUPERSET
}

model WorkoutSetGroup {
  id           Int             @id @default(autoincrement())
  routineDay   RoutineDay?     @relation(fields: [routineDayId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineDayId Int?
  session      WorkoutSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionId    Int?
  sets         WorkoutSet[]
  type         SetGroupType    @default(NORMAL)
  order        Int
  comment      String?
}

enum SetType {
  NORMAL
  WARMUP
  DROPSET
  FAILURE
}

model WorkoutSet {
  id               Int             @id @default(autoincrement())
  type             SetType         @default(NORMAL)
  setGroup         WorkoutSetGroup @relation(fields: [setGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  setGroupId       Int
  exercise         Exercise        @relation(fields: [exerciseId], references: [id])
  exerciseId       Int
  reps             Int
  repetitionUnit   RepetitionUnit  @relation(fields: [repetitionUnitId], references: [id])
  repetitionUnitId Int
  weight           Float           @default(0)
  weightUnit       WeightUnit      @relation(fields: [weightUnitId], references: [id])
  weightUnitId     Int
  order            Int
  restTime         Int             @default(0)
  completed        Boolean         @default(false)
}

enum ExerciseForce {
  push
  pull
  static
}

enum ExerciseLevel {
  beginner
  intermediate
  expert
}

enum MuscleGroup {
  abdominals
  chest
  quadriceps
  hamstrings
  glutes
  adductors
  abductors
  calves
  forearms
  shoulders
  biceps
  triceps
  traps
  lats
  middle_back
  lower_back
  neck
}

enum ExerciseCategory {
  strength
  cardio
  stretching
  plyometrics
  powerlifting
  strongman
  olympic_weightlifting
}

enum ExerciseMechanic {
  compound
  isolation
}

enum Equipment {
  body_only
  machine
  cable
  foam_roll
  dumbbell
  barbell
  ez_curl_bar
  kettlebells
  medicine_ball
  exercise_ball
  bands
  other
}

model Exercise {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  equipment        Equipment?
  force            ExerciseForce?
  level            ExerciseLevel
  mechanic         ExerciseMechanic?
  primaryMuscles   MuscleGroup[]
  secondaryMuscles MuscleGroup[]
  instructions     String[]
  category         ExerciseCategory
  images           String[]
  workoutSets      WorkoutSet[]
}

model RepetitionUnit {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  sets  WorkoutSet[]
  users User[]
}

model WeightUnit {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  sets  WorkoutSet[]
  users User[]
}

model WorkoutSession {
  id         Int               @id @default(autoincrement())
  name       String
  impression Int?
  notes      String
  startTime  DateTime          @default(now())
  endTime    DateTime?
  setGroups  WorkoutSetGroup[]
  template   RoutineDay?       @relation(fields: [templateId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  templateId Int?
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
}
